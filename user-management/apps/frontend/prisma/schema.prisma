generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  username            String               @unique
  password            String
  role                Role
  parentId            String?
  balance             Float                @default(0)
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  name                String?
  code                String?
  contactno           String?
  mobileshare         Float                @default(100)
  reference           String?
  creditLimit         Float                @default(0)
  exposure            Float                @default(0)
  casinoStatus        Boolean?
  bets                Bet[]
  settlements         BetSettlement[]
  ledger              Ledger[]
  loginSessions       LoginSession[]
  profitDistributions ProfitDistribution[]
  parent              User?                @relation("UserHierarchy", fields: [parentId], references: [id])
  children            User[]               @relation("UserHierarchy")
  UserCommissionShare UserCommissionShare?
}

model Ledger {
  id              String     @id @default(uuid())
  userId          String
  collection      String?
  debit           Float      @default(0)
  credit          Float      @default(0)
  balanceAfter    Float
  type            LedgerType
  remark          String?
  createdAt       DateTime   @default(now())
  referenceId     String?
  transactionType String?
  matchId         String?
  sourceUserId    String?
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Match {
  id          String          @id @default(uuid())
  title       String
  externalId  String          @unique
  status      MatchStatus     @default(UPCOMING)
  createdAt   DateTime        @default(now())
  apiSource   String?
  beventId    String?
  bmarketId   String?
  isActive    Boolean         @default(true)
  isCricket   Boolean         @default(true)
  isDeleted   Boolean         @default(false)
  isLive      Boolean         @default(false)
  lastUpdated DateTime        @default(now())
  matchName   String?
  matchType   String?
  rawData     Json?
  startTime   DateTime?
  teams       Json?
  tournament  String?
  result      String?
  resultData  Json?
  settledAt   DateTime?
  winner      String?
  bets        Bet[]
  settlements BetSettlement[]
  odds        MatchOdds[]

  @@index([bmarketId])
  @@index([beventId])
  @@index([status])
  @@index([startTime])
  @@index([isLive])
  @@index([isActive])
  @@index([createdAt])
  @@index([settledAt])
  @@index([winner])
}

model MatchOdds {
  id          String   @id @default(uuid())
  matchId     String
  marketId    String
  eventId     String
  oddsData    Json
  lastUpdated DateTime @default(now())
  isActive    Boolean  @default(true)
  match       Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@index([marketId])
  @@index([eventId])
  @@index([lastUpdated])
  @@index([isActive])
}

model Bet {
  id                  String               @id @default(uuid())
  userId              String
  matchId             String
  odds                Float
  stake               Float
  potentialWin        Float
  status              BetStatus            @default(PENDING)
  createdAt           DateTime             @default(now())
  marketId            String?
  selectionId         String?
  selectionName       String?
  marketName          String?
  type                String?
  
  // Enhanced odds data storage
  marketType          String?              // 'match_winner', 'cricketcasino', 'tied_match', 'custom'
  oddsSnapshot        Json?                // Complete odds data when bet was placed
  oddsTier            Int?                 // Which tier of odds (1=best, 2=second best, etc.)
  availableStake      Float?               // Available stake at that odds level
  
  lostAmount          Float?
  result              String?
  settledAt           DateTime?
  updatedAt           DateTime?            @updatedAt
  wonAmount           Float?
  match               Match                @relation(fields: [matchId], references: [id])
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  settlements         BetSettlement[]
  profitDistributions ProfitDistribution[]

  @@index([userId, createdAt])
  @@index([marketId])
  @@index([selectionId])
  @@index([type])
  @@index([status])
  @@index([settledAt])
  @@index([result])
  @@index([marketType])
  @@index([oddsTier])
}

model ProfitDistribution {
  id           String   @id @default(uuid())
  betId        String
  userId       String
  profitShare  Float
  amountEarned Float
  createdAt    DateTime @default(now())
  bet          Bet      @relation(fields: [betId], references: [id])
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BetSettlement {
  id            String    @id @default(uuid())
  matchId       String
  betId         String?
  userId        String?
  winner        String
  result        String
  settledAt     DateTime  @default(now())
  totalStakes   Float
  totalWinnings Float
  totalLosses   Float
  winningBets   Int
  losingBets    Int
  isProcessed   Boolean   @default(false)
  processedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bet           Bet?      @relation(fields: [betId], references: [id])
  match         Match     @relation(fields: [matchId], references: [id], onDelete: Cascade)
  user          User?     @relation(fields: [userId], references: [id])

  @@index([matchId])
  @@index([betId])
  @@index([userId])
  @@index([settledAt])
  @@index([isProcessed])
}

model LoginSession {
  id              String    @id @default(uuid())
  userId          String
  loginAt         DateTime  @default(now())
  logoutAt        DateTime?
  ipAddress       String?
  userAgent       String?
  deviceType      String?
  location        String?
  sessionDuration Int?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([loginAt])
  @@index([isActive])
}

model UserCommissionShare {
  id                      String   @id @default(uuid())
  userId                  String   @unique
  share                   Float    @default(0)
  cshare                  Float    @default(0)
  icshare                 Float    @default(0)
  casinocommission        Float    @default(0)
  matchcommission         Float    @default(0)
  sessioncommission       Float    @default(0)
  sessionCommission       Float?
  session_commission_type String   @default("No Comm")
  commissionType          String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime
  available_share_percent Float    @default(0)
  User                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CasinoTable {
  id          Int             @id @default(autoincrement())
  eventId     BigInt          @map("event_id")
  name        String          @db.VarChar(50)
  shortName   String          @map("short_name") @db.VarChar(20)
  betStatus   CasinoBetStatus @default(OPEN) @map("bet_status")
  minStake    Decimal         @default(0) @map("min_stake") @db.Decimal(10, 2)
  maxStake    Decimal         @default(0) @map("max_stake") @db.Decimal(10, 2)
  dataUrl     String?         @map("data_url")
  resultUrl   String?         @map("result_url")
  streamId    Int?            @map("stream_id")
  lastUpdated DateTime        @default(now()) @updatedAt @map("last_updated")

  @@index([betStatus], map: "idx_casino_tables_bet_status")
  @@index([streamId], map: "idx_casino_tables_stream_id")
  @@map("casino_tables")
}

enum Role {
  ADMIN
  SUPER_ADMIN
  SUB_OWNER
  SUB
  MASTER
  SUPER_AGENT
  AGENT
  USER
  OWNER
}

enum LedgerType {
  DEPOSIT
  WITHDRAWAL
  WIN
  LOSS
  ADJUSTMENT
  LIMIT_UPDATE
  PNL_CREDIT
  PNL_DEBIT
  SETTLEMENT
  BET_PLACEMENT
  BET_CANCELLATION
  BET_WIN
  BET_LOSS
  BET_SETTLEMENT
  COMMISSION
}

enum MatchStatus {
  UPCOMING
  LIVE
  CLOSED
  COMPLETED
  ABANDONED
  CANCELED
  OPEN
  SUSPENDED
  SETTLED
}

enum BetStatus {
  PENDING
  WON
  LOST
  CANCELLED
  SETTLED
}

enum CasinoBetStatus {
  OPEN
  CLOSED
}
